---
description: |
  What is the result of the following code?

  \begin{lstlisting}
  a = 100
  b = 150
  print(a and b)
  \end{lstlisting}

marks: \half
---
description: |
  What is the result of the following code

  \begin{lstlisting}
  x = 4
  z = x < 10 or x/0 > 2
  print(z)
  \end{lstlisting}

options:
  - \lstinline{True}
  - \lstinline{None}
  - \lstinline{False}
  - \lstinline{Error}
  - \lstinline{2}
  - \lstinline{4}
  - \lstinline{0}


marks: \half
---
description: |
  Given two lists of integers (of possibly unequal lengths), write a function to create a third list to find the sum of the two lists. 
  The third list size is the size of the shorter of the two input lists.
  x1 = [1, 2, 3]
  x2 = [2, 4, 6, 8]

  Output should be: [3, 6, 9]


marks: 1
---
description: |
  What is the result of the following code?

  \begin{lstlisting}
  x = 10
  def f(x):
      print(x, end = " ")
      x = 20
      print(x, end= " ")
  f(5)
  \end{lstlisting}

options:
  - \lstinline{5 20}
  - Error
  - \lstinline{10 20}
  - \lstinline{10 5 20}
  - None
  - \lstinline{5 10}
  - \lstinline{5 10 20}


marks: \half
---
description: |
  What is the result of the following code?
  
  \begin{lstlisting}
  def f(x):
    if x == 0:
        return 0
    elif x%2==0:
        x = f(x//2)
    else:
        x = f(x-1)
    return x
  
  print(f(0), f(1), f(10))
  \end{lstlisting}

options:
  - \lstinline{0 0 0} 
  - \lstinline{0 1 10}
  - Error
  - \lstinline{None None None}
  - \lstinline{0 0 10}

marks: \half
---
description: |
  What is the result of the following code?

  \begin{lstlisting}
  count = 0
  for i in range(5, 8):
      for j in range(2, i):
          count = count + 1
          if i%j == 0:
              continue
  print(count)
  \end{lstlisting}

marks: \half
---
description: |
  What is the result of the following code?

  \begin{lstlisting}
  count = 0
  for i in range(5, 8):
      for j in range(2, i):
          count = count + 1
          if i%j == 0:
              break
  print(count)
  \end{lstlisting}

marks: \half
---
description: |
  What is the result of the following code?

  \begin{lstlisting}
  y = 10
  def g(x):
    x = x + 1
    y = x
    return y
  def f(x):
    return x + g(x)
  print(f(1))
  \end{lstlisting}

options:
  - \lstinline{3} 
  - \lstinline{f}
  - Error
  - \lstinline{10}
  - \lstinline{11}
  - \lstinline{y}
  - \lstinline{x}

marks: \half
---
description: |
  What is the result of the following code?

  \begin{lstlisting}
  def g(x):
    x = x + 1
    def h(y):
      return y + x
    return y
  print(g(1))
  \end{lstlisting}

options:
  - Error
  - \lstinline{2}
  - \lstinline{3}
  - \lstinline{1}
  - \lstinline{4}
  - \lstinline{y}
  - \lstinline{g}

marks: \half
---
description: |
Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a â‰  b, then a and b are an amicable pair and each of a and b are called amicable numbers.

For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

Write a program to evaluate the sum of all the amicable numbers under 1000. 
One mark for correctly writing the function d. One mark for checking for amicability. One mark for finding the sum of amicable numbers under 1000.

marks: 3



